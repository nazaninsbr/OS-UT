{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Times-Roman;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red26\green23\blue24;\red0\green0\blue0;\red19\green156\blue235;
}
{\*\expandedcolortbl;;\cssrgb\c13725\c12157\c12549;\cssrgb\c0\c0\c0;\cssrgb\c0\c67843\c93725;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat2\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww13940\viewh9960\viewkind0
\deftab720
\pard\pardeftab720\sl300\sa240\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 \expnd0\expndtw0\kerning0
A thread is a basic unit of 
\fs24 CPU 
\fs26\fsmilli13333 utilization; it comprises a thread 
\fs24 ID
\fs26\fsmilli13333 , a program counter, a register set, and a stack. It shares with other threads belonging to the same process its code section, data section, and other operating-system resources, such as open files and signals. 
\f1\fs24 \cf3 \

\f0\fs26\fsmilli13333 \cf2 A traditional (or 
\i\b \cf2 heavyweight
\i0\b0 \cf2 ) process has a single thread of control. If a process has multiple threads of control, it can perform more than one task at a time. 
\f1\fs24 \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2017-11-19 at 12.23.39 PM.png \width12920 \height8840
}¬}\
\
\pard\pardeftab720\sl300\sa240\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 \expnd0\expndtw0\kerning0
In certain situations, a single application may be required to perform several similar tasks. For example, a web server accepts client requests for web pages, images, sound, and so forth. A busy web server may have several (perhaps thousands of) clients concurrently accessing it. If the web server ran as a traditional single-threaded process, it would be able to service only one client at a time, and a client might have to wait a very long time for its request to be serviced. 
\f1\fs24 \cf3 \

\f0\fs26\fsmilli13333 \cf2 One solution is to have the server run as a single process that accepts requests. When the server receives a request, it creates a separate process to service that request. In fact, this process-creation method was in common use before threads became popular. Process creation is time consuming and resource intensive, however. If the new process will perform the same tasks as the existing process, why incur all that overhead? It is generally more efficient to use one process that contains multiple threads. If the web-server process is multithreaded, the server will create a separate thread that listens for client requests. When a request is made, rather than creating another process, the server creates a new thread to service the request and resume listening for additional requests. 
\f1\fs24 \cf3 \

\f0\fs26\fsmilli13333 \cf2 The benefits of multithreaded programming can be broken down into four major categories: 
\f1\fs24 \cf3 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\f0\b\fs26\fsmilli13333 \cf4 1. \cf2 Responsiveness
\b0 \cf2 . Multithreading an interactive application may allow a program to continue running even if part of it is blocked or is performing a lengthy operation, thereby increasing responsiveness to the user. This quality is especially useful in designing user interfaces. For instance, consider what happens when a user clicks a button that results in the performance of a time-consuming operation. A single-threaded application would be unresponsive to the user until the operation had completed. In contrast, if the time-consuming operation is performed in a separate thread, the application remains responsive to the user. 
\f1\fs24 \cf3 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\sa266\partightenfactor0
\ls1\ilvl0
\f0\b\fs26\fsmilli13333 \cf2 \kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
Resource sharing. Processes can only share resources through techniques such as shared memory and message passing. Such techniques must be explicitly arranged by the programmer. However, threads share the memory and the resources of the process to which they belong by default. The benefit of sharing code and data is that it allows an application to have several different threads of activity within the same address space. \cf4 \uc0\u8232 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\sa266\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	3.	}\expnd0\expndtw0\kerning0
Economy. Allocating memory and resources for process creation is costly. Because threads share the resources of the process to which they belong, it is more economical to create and context-switch threads. Empirically gauging the difference in overhead can be difficult, but in general it is significantly more time consuming to create and manage processes than threads. In Solaris, for example, creating a process is about thirty times 
\b0 \cf2 slower than is creating a thread, and context switching is about five times slower. 
\f1\fs24 \cf3 \
\pard\pardeftab720\sl300\sa240\partightenfactor0
\ls1\ilvl0
\f0\b\fs26\fsmilli13333 \cf4 \kerning1\expnd0\expndtw0 {\listtext	4.	}\expnd0\expndtw0\kerning0
4. \cf2 Scalability. 
\b0 \cf2 The benefits of multithreading can be even greater in a multiprocessor architecture, where threads may be running in parallel on different processing cores. A single-threaded process can run on only one processor, regardless how many are available. We explore this issue further in the following section. 
\f1\fs24 \cf3 \
\ls1\ilvl0
\f0\fs26\fsmilli13333 \cf2 \
place multiple computing cores on a single chip. Each core appears as a separate processor to the operating system (Section 1.3.2). Whether the cores appear across 
\fs24 CPU 
\fs26\fsmilli13333 chips or within 
\fs24 CPU 
\fs26\fsmilli13333 chips, we call these systems 
\b \cf4 multicore 
\b0 \cf2 or 
\b \cf4 multiprocessor 
\b0 \cf2 systems. \
\
\ls1\ilvl0
\b \cf4 \
}