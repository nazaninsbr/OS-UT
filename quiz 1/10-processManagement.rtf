{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red26\green23\blue24;\red0\green0\blue0;\red19\green156\blue235;
}
{\*\expandedcolortbl;;\cssrgb\c13725\c12157\c12549;\cssrgb\c0\c0\c0;\cssrgb\c0\c67843\c93725;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl300\sa240\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 \expnd0\expndtw0\kerning0
A program does nothing unless its instructions are executed by a 
\fs24 CPU
\fs26\fsmilli13333 . A program in execution, as mentioned, is a process. A time-shared user program such as a compiler is a process. A word-processing program being run by an individual user on a 
\fs24 PC 
\fs26\fsmilli13333 is a process. A system task, such as sending output to a printer, can also be a process (or at least part of one). For now, you can consider a process to be a job or a time-shared program, but later you will learn that the concept is more general. As we shall see in Chapter 3, it is possible to provide system calls that allow processes to create subprocesses to execute concurrently. 
\f1\fs24 \cf3 \

\f0\fs26\fsmilli13333 \cf2 A process needs certain resources\'97including 
\fs24 CPU 
\fs26\fsmilli13333 time, memory, files, and 
\fs24 I/O 
\fs26\fsmilli13333 devices\'97to accomplish its task. These resources are either given to the process when it is created or allocated to it while it is running. In addition to the various physical and logical resources that a process obtains when it is created, various initialization data (input) may be passed along. For example, consider a process whose function is to display the status of a file on the screen of a terminal. The process will be given the name of the file as an input and will execute the appropriate instructions and system calls to obtain and display the desired information on the terminal. When the process terminates, the operating system will reclaim any reusable resources. 
\f1\fs24 \cf3 \

\f0\fs26\fsmilli13333 \cf2 We emphasize that a program by itself is not a process. A program is a 
\i\b passive 
\i0\b0 entity, like the contents of a file stored on disk, whereas a process is an 
\i\b active 
\i0\b0 entity. A single-threaded process has one 
\b \cf4 program counter 
\b0 \cf2 specifying the next instruction to execute. (Threads are covered in Chapter 4.) The execution of such a process must be sequential. The 
\fs24 CPU 
\fs26\fsmilli13333 executes one instruction of the process after another, until the process completes. Further, at any time, one instruction at most is executed on behalf of the process. Thus, although two processes may be associated with the same program, they are nevertheless considered two separate execution sequences. A multithreaded process has multiple program counters, each pointing to the next instruction to execute for a given thread. 
\f1\fs24 \cf3 \

\f0\fs26\fsmilli13333 \cf2 A process is the unit of work in a system. A system consists of a collection of processes, some of which are operating-system processes (those that execute system code) and the rest of which are user processes (those that execute user code). All these processes can potentially execute concurrently\'97by multiplexing on a single 
\fs24 CPU
\fs26\fsmilli13333 , for example. 
\f1\fs24 \cf3 \

\f0\fs26\fsmilli13333 \cf2 The operating system is responsible for the following activities in connection with process management: 
\f1\fs24 \cf3 \
\pard\pardeftab720\sl340\sa240\partightenfactor0

\f0\fs32 \cf4 \dn3 \
\'95 
\fs26\fsmilli13333 \cf2 \up0 Scheduling processes and threads on the 
\fs24 CPU
\fs26\fsmilli13333 s\uc0\u8232 
\fs32 \cf4 \dn3 \'95 
\fs26\fsmilli13333 \cf2 \up0 Creating and deleting both user and system processes \

\fs32 \cf4 \dn3 \'95 
\fs26\fsmilli13333 \cf2 \up0 Suspending and resuming processes\uc0\u8232 
\fs32 \cf4 \dn3 \'95 
\fs26\fsmilli13333 \cf2 \up0 Providing mechanisms for process synchronization\uc0\u8232 
\fs32 \cf4 \dn3 \'95 
\fs26\fsmilli13333 \cf2 \up0 Providing mechanisms for process communication 
\f1\fs24 \cf3 \

\f0\fs32 \cf4 \dn3 \
\
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 \up0 We discuss process-management techniques in Chapters 3 through 5. 
\f1\fs24 \cf3 \
}