{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Times-Roman;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red26\green23\blue24;\red19\green156\blue235;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\cssrgb\c13725\c12157\c12549;\cssrgb\c0\c67843\c93725;\cssrgb\c0\c0\c0;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl300\sa240\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 \expnd0\expndtw0\kerning0
Next, we illustrate a classic software-based solution to the critical-section problem known as 
\b \cf3 Peterson\'92s solution
\b0 \cf2 . Because of the way modern computer architectures perform basic machine-language instructions, such as 
\f1\fs29\fsmilli14667 load 
\f0\fs26\fsmilli13333 and 
\f1\fs29\fsmilli14667 store
\f0\fs26\fsmilli13333 , there are no guarantees that Peterson\'92s solution will work correctly on such architectures. However, we present the solution because it provides a good algorithmic description of solving the critical-section problem and illustrates some of the complexities involved in designing software that addresses the requirements of mutual exclusion, progress, and bounded waiting. 
\f1\fs24 \cf4 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2017-11-28 at 12.16.03 PM.png \width8740 \height6160
}¬}
\f1 \cf4 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl300\sa240\partightenfactor0
\cf4 \

\f0\fs26\fsmilli13333 \cf2 Peterson\'92s solution is restricted to two processes that alternate execution between their critical sections and remainder sections. The processes are numbered 
\i \cf2 P
\i0\fs18\fsmilli9333 \dn6 0 
\fs26\fsmilli13333 \cf2 \up0 and 
\i \cf2 P
\i0\fs18\fsmilli9333 \dn6 1
\fs26\fsmilli13333 \cf2 \up0 . For convenience, when presenting 
\i \cf2 P
\fs18\fsmilli9333 \dn6 i
\i0\fs26\fsmilli13333 \cf2 \up0 , we use 
\i \cf2 P
\fs18\fsmilli9333 \dn6 j 
\i0\fs26\fsmilli13333 \cf2 \up0 to denote the other process; that is, 
\f1\fs29\fsmilli14667 j 
\f0\fs26\fsmilli13333 equals 1 
\f1 \cf2 \uc0\u8722  
\fs29\fsmilli14667 \cf2 i
\f0\fs26\fsmilli13333 . 
\f1\fs24 \cf4 \

\f0\fs26\fsmilli13333 \cf2 Peterson\'92s solution requires the two processes to share two data items: 
\f1\fs24 \cf4 \
\pard\pardeftab720\sl340\partightenfactor0

\fs29\fsmilli14667 \cf2              int turn;\
             boolean flag[2];\
\pard\pardeftab720\sl300\sa240\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 The variable 
\f1\fs29\fsmilli14667 turn 
\f0\fs26\fsmilli13333 indicates whose turn it is to enter its critical section. That is, if 
\f1\fs29\fsmilli14667 turn == i
\f0\fs26\fsmilli13333 , then process 
\i \cf2 P
\fs18\fsmilli9333 \dn6 i 
\i0\fs26\fsmilli13333 \cf2 \up0 is allowed to execute in its critical section. The 
\f1\fs29\fsmilli14667 flag 
\f0\fs26\fsmilli13333 array is used to indicate if a process is ready to enter its critical section. For example, if 
\f1\fs29\fsmilli14667 flag[i] 
\f0\fs26\fsmilli13333 is 
\f1\fs29\fsmilli14667 true
\f0\fs26\fsmilli13333 , this value indicates that 
\i \cf2 P
\fs18\fsmilli9333 \dn6 i 
\i0\fs26\fsmilli13333 \cf2 \up0 is ready to enter its critical section. With an explanation of these data structures complete, we are now ready to describe the algorithm shown in Figure 5.2. 
\f1\fs24 \cf4 \

\f0\fs26\fsmilli13333 \cf2 To enter the critical section, process 
\i \cf2 P
\fs18\fsmilli9333 \dn6 i 
\i0\fs26\fsmilli13333 \cf2 \up0 first sets 
\f1\fs29\fsmilli14667 flag[i] 
\f0\fs26\fsmilli13333 to be 
\f1\fs29\fsmilli14667 true 
\f0\fs26\fsmilli13333 and then sets 
\f1\fs29\fsmilli14667 turn 
\f0\fs26\fsmilli13333 to the value 
\f1\fs29\fsmilli14667 j
\f0\fs26\fsmilli13333 , thereby asserting that if the other process wishes to enter the critical section, it can do so. If both processes try to enter at the same time, 
\f1\fs29\fsmilli14667 turn 
\f0\fs26\fsmilli13333 will be set to both 
\f1\fs29\fsmilli14667 i 
\f0\fs26\fsmilli13333 and 
\f1\fs29\fsmilli14667 j 
\f0\fs26\fsmilli13333 at roughly the same time. Only one of these assignments will last; the other will occur but will be overwritten immediately. The eventual value of 
\f1\fs29\fsmilli14667 turn 
\f0\fs26\fsmilli13333 determines which of the two processes is allowed to enter its critical section first. 
\f1\fs24 \cf4 \
\pard\pardeftab720\sl280\partightenfactor0
\cf4 {{\NeXTGraphic page232image15304.png \width775 \height36
}¬}\pard\pardeftab720\sl280\partightenfactor0
\cf4  {{\NeXTGraphic page232image15472.png \width26 \height261
}¬} {{\NeXTGraphic page232image15472.png \width26 \height261
}¬}\
\pard\pardeftab720\sl300\sa240\partightenfactor0

\f0\b\fs26\fsmilli13333 \cf3 1. 2. 3. 
\f1\b0\fs24 \cf4 \

\f0\fs26\fsmilli13333 \cf2 We now prove that this solution is correct. We need to show that: 
\f1\fs24 \cf4 \

\f0\fs26\fsmilli13333 \cf2 Mutual exclusion is preserved.\uc0\u8232 The progress requirement is satisfied.\u8232 The bounded-waiting requirement is met. 
\f1\fs24 \cf4 \
\pard\pardeftab720\sl340\sa240\partightenfactor0

\fs29\fsmilli14667 \cf2 flag[i] = true
\f0\fs26\fsmilli13333 ;\uc0\u8232 
\f1\fs29\fsmilli14667 turn = j;\uc0\u8232 while (flag[j] && turn == j); 
\fs24 \cf4 \
\pard\pardeftab720\sl280\partightenfactor0
\cf4 {{\NeXTGraphic page232image15304.png \width775 \height36
}¬}\pard\pardeftab720\sl280\partightenfactor0
\cf4 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 critical section 
\f1\fs24 \cf4 \
\pard\pardeftab720\sl280\partightenfactor0
\cf4 {{\NeXTGraphic page232image20112.png \width523 \height32
}¬}\pard\pardeftab720\sl280\partightenfactor0
\cf4  {{\NeXTGraphic page232image20280.png \width20 \height138
}¬} {{\NeXTGraphic page232image20280.png \width20 \height138
}¬}\
\pard\pardeftab720\sl340\partightenfactor0

\fs29\fsmilli14667 \cf2 flag[i] = false;\
\pard\pardeftab720\sl280\partightenfactor0

\fs24 \cf4 {{\NeXTGraphic page232image20112.png \width523 \height32
}¬}\pard\pardeftab720\sl280\partightenfactor0
\cf4 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 To prove property 1, we note that each 
\i \cf2 P
\fs18\fsmilli9333 \dn6 i 
\i0\fs26\fsmilli13333 \cf2 \up0 enters its critical section only if either 
\f1\fs29\fsmilli14667 flag[j] 
\f0\fs26\fsmilli13333 == 
\f1\fs29\fsmilli14667 false 
\f0\fs26\fsmilli13333 or 
\f1\fs29\fsmilli14667 turn 
\f0\fs26\fsmilli13333 == 
\f1\fs29\fsmilli14667 i
\f0\fs26\fsmilli13333 . Also note that, if both processes can be executing in their critical sections at the same time, then 
\f1\fs29\fsmilli14667 flag[0] 
\f0\fs26\fsmilli13333 == 
\f1\fs29\fsmilli14667 flag[1] 
\f0\fs26\fsmilli13333 == 
\f1\fs29\fsmilli14667 true
\f0\fs26\fsmilli13333 . These two observations imply that 
\i \cf2 P
\i0\fs18\fsmilli9333 \dn6 0 
\fs26\fsmilli13333 \cf2 \up0 and 
\i \cf2 P
\i0\fs18\fsmilli9333 \dn6 1 
\fs26\fsmilli13333 \cf2 \up0 could not have successfully executed their 
\f1\fs29\fsmilli14667 while 
\f0\fs26\fsmilli13333 statements at about the same time, since the value of 
\f1\fs29\fsmilli14667 turn 
\f0\fs26\fsmilli13333 can be either 0 or 1 but cannot be both. Hence, one of the processes \'97say, 
\i \cf2 P
\fs18\fsmilli9333 \dn6 j 
\i0\fs26\fsmilli13333 \cf2 \up0 \'97must have successfully executed the 
\f1\fs29\fsmilli14667 w
\f0\fs26\fsmilli13333 hile statement, whereas 
\i \cf2 P
\fs18\fsmilli9333 \dn6 i 
\i0\fs26\fsmilli13333 \cf2 \up0 had to execute at least one additional statement (
\f1 \cf2 \'93
\fs29\fsmilli14667 \cf2 turn 
\f0\fs26\fsmilli13333 == 
\f1\fs29\fsmilli14667 j
\fs26\fsmilli13333 \cf2 \'94
\f0 \cf2 ). However, at that time, 
\f1\fs29\fsmilli14667 flag[j] 
\f0\fs26\fsmilli13333 == 
\f1\fs29\fsmilli14667 true 
\f0\fs26\fsmilli13333 and 
\f1\fs29\fsmilli14667 turn 
\f0\fs26\fsmilli13333 == 
\f1\fs29\fsmilli14667 j
\f0\fs26\fsmilli13333 , and this condition will persist as long as 
\i \cf2 P
\fs18\fsmilli9333 \dn6 j 
\i0\fs26\fsmilli13333 \cf2 \up0 is in its critical section; as a result, mutual exclusion is preserved. 
\f1\fs24 \cf4 \
\
}