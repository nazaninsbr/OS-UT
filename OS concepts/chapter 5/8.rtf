{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red26\green23\blue24;\red19\green156\blue235;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\cssrgb\c13725\c12157\c12549;\cssrgb\c0\c67843\c93725;\cssrgb\c0\c0\c0;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl300\sa240\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 \expnd0\expndtw0\kerning0
The main disadvantage of the implementation given here is that it requires 
\b \cf3 busy waiting
\b0 \cf2 . While a process is in its critical section, any other process that tries to enter its critical section must loop continuously in the call to 
\f1\fs29\fsmilli14667 \cf2 acquire()
\f0\fs26\fsmilli13333 \cf2 . In fact, this type of mutex lock is also called a 
\b \cf3 spinlock 
\b0 \cf2 because the process 
\f1 \cf2 \'93
\f0 \cf2 spins
\f1 \cf2 \'94 
\f0 \cf2 while waiting for the lock to become available. (We see the same issue with the code examples illustrating the 
\f1\fs29\fsmilli14667 \cf2 test and set() 
\f0\fs26\fsmilli13333 \cf2 instruction and the 
\f1\fs29\fsmilli14667 \cf2 compare and swap() 
\f0\fs26\fsmilli13333 \cf2 instruction.) This continual looping is clearly a problem in a real multiprogramming system, where a single 
\fs24 CPU 
\fs26\fsmilli13333 is shared among many processes. Busy waiting wastes 
\fs24 CPU 
\fs26\fsmilli13333 cycles that some other process might be able to use productively. 
\f1\fs24 \cf4 \

\f0\fs26\fsmilli13333 \cf2 Spinlocks do have an advantage, however, in that no context switch is required when a process must wait on a lock, and a context switch may take considerable time. Thus, when locks are expected to be held for short times, spinlocks are useful. They are often employed on multiprocessor systems where one thread can 
\f1 \cf2 \'93
\f0 \cf2 spin
\f1 \cf2 \'94 
\f0 \cf2 on one processor while another thread performs its critical section on another processor. 
\f1\fs24 \cf4 \
}