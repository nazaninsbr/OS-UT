{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red19\green156\blue235;\red26\green23\blue24;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\cssrgb\c0\c67843\c93725;\cssrgb\c13725\c12157\c12549;\cssrgb\c0\c0\c0;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat2\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl300\sa240\partightenfactor0

\f0\b\fs26\fsmilli13333 \cf2 \expnd0\expndtw0\kerning0
1. \cf3 Responsiveness
\b0 . Multithreading an interactive application may allow a program to continue running even if part of it is blocked or is performing a lengthy operation, thereby increasing responsiveness to the user. This quality is especially useful in designing user interfaces. For instance, consider what happens when a user clicks a button that results in the performance of a time-consuming operation. A single-threaded application would be unresponsive to the user until the operation had completed. In contrast, if the time-consuming operation is performed in a separate thread, the application remains responsive to the user. 
\f1\fs24 \cf4 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\sa266\partightenfactor0
\ls1\ilvl0
\f0\b\fs26\fsmilli13333 \cf3 \kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
Resource sharing. Processes can only share resources through techniques such as shared memory and message passing. Such techniques must be explicitly arranged by the programmer. However, threads share the memory and the resources of the process to which they belong by default. The benefit of sharing code and data is that it allows an application to have several different threads of activity within the same address space. \cf2 \uc0\u8232 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\sa266\partightenfactor0
\ls1\ilvl0\cf3 \kerning1\expnd0\expndtw0 {\listtext	3.	}\expnd0\expndtw0\kerning0
Economy. Allocating memory and resources for process creation is costly. Because threads share the resources of the process to which they belong, it is more economical to create and context-switch threads. Empirically gauging the difference in overhead can be difficult, but in general it is significantly more time consuming to create and manage processes than threads. In Solaris, for example, creating a process is about thirty times 
\f1\b0\fs24 \cf4 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\sa266\partightenfactor0
\ls1\ilvl0
\f0\b\fs26\fsmilli13333 \cf2 4. \cf3 Scalability. 
\b0 The benefits of multithreading can be even greater in a multiprocessor architecture, where threads may be running in parallel on different processing cores. A single-threaded process can run on only one processor, regardless how many are available. We explore this issue further in the following section. 
\f1\fs24 \cf4 \
}