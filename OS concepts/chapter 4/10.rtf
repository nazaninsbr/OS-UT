{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;\red26\green23\blue24;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c13725\c12157\c12549;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl340\sa240\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \expnd0\expndtw0\kerning0
fork() 
\f1\fs26\fsmilli13333 system call is used to create a separate, duplicate process. The semantics of the 
\f0\fs29\fsmilli14667 fork() 
\f1\fs26\fsmilli13333 and 
\f0\fs29\fsmilli14667 exec() 
\f1\fs26\fsmilli13333 system calls change in a multithreaded program. 
\f0\fs24 \cf3 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\f1\fs26\fsmilli13333 \cf2 If one thread in a program calls 
\f0\fs29\fsmilli14667 \cf2 fork()
\f1\fs26\fsmilli13333 \cf2 , does the new process duplicate all threads, or is the new process single-threaded? Some 
\fs24 UNIX 
\fs26\fsmilli13333 systems have chosen to have two versions of 
\f0\fs29\fsmilli14667 \cf2 fork()
\f1\fs26\fsmilli13333 \cf2 , one that duplicates all threads and another that duplicates only the thread that invoked the 
\f0\fs29\fsmilli14667 \cf2 fork() 
\f1\fs26\fsmilli13333 \cf2 system call. 
\f0\fs24 \cf3 \

\f1\fs26\fsmilli13333 \cf2 The 
\f0\fs29\fsmilli14667 \cf2 exec() 
\f1\fs26\fsmilli13333 \cf2 system call typically works in the same way as described in Chapter 3. That is, if a thread invokes the 
\f0\fs29\fsmilli14667 \cf2 exec() 
\f1\fs26\fsmilli13333 \cf2 system call, the program specified in the parameter to 
\f0\fs29\fsmilli14667 \cf2 exec() 
\f1\fs26\fsmilli13333 \cf2 will replace the entire process \'97 including all threads. 
\f0\fs24 \cf3 \

\f1\fs26\fsmilli13333 \cf2 Which of the two versions of 
\f0\fs29\fsmilli14667 \cf2 fork() 
\f1\fs26\fsmilli13333 \cf2 to use depends on the application. If 
\f0\fs29\fsmilli14667 \cf2 exec() 
\f1\fs26\fsmilli13333 \cf2 is called immediately after forking, then duplicating all threads is unnecessary, as the program specified in the parameters to 
\f0\fs29\fsmilli14667 \cf2 exec() 
\f1\fs26\fsmilli13333 \cf2 will replace the process. In this instance, duplicating only the calling thread is appropriate. If, however, the separate process does not call 
\f0\fs29\fsmilli14667 \cf2 exec() 
\f1\fs26\fsmilli13333 \cf2 after forking, the separate process should duplicate all threads. 
\f0\fs24 \cf3 \
}